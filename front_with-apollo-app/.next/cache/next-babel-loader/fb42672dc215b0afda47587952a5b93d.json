{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ighz/Git/API/prisma-examples_Graphql/front_with-apollo-app/components/PostList.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query allPosts($first: Int!, $skip: Int!) {\\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\\n      id\\n      title\\n      votes\\n      url\\n      createdAt\\n    }\\n    _allPostsMeta {\\n      count\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-client';\nimport gql from 'graphql-tag';\nimport ErrorMessage from './ErrorMessage';\nimport PostUpvoter from './PostUpvoter';\nexport var ALL_POSTS_QUERY = gql(_templateObject());\nexport var allPostsQueryVars = {\n  skip: 0,\n  first: 10\n};\nexport default function PostList() {\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    variables: allPostsQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var loadMorePosts = function loadMorePosts() {\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: function updateQuery(previousResult, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return _Object$assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [].concat(_toConsumableArray(previousResult.allPosts), _toConsumableArray(fetchMoreResult.allPosts))\n        });\n      }\n    });\n  };\n\n  if (error) return __jsx(ErrorMessage, {\n    message: \"Error loading posts.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  });\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Loading\");\n  var allPosts = data.allPosts,\n      _allPostsMeta = data._allPostsMeta;\n  var areMorePosts = allPosts.length < _allPostsMeta.count;\n  return __jsx(\"section\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, allPosts.map(function (post, index) {\n    return __jsx(\"li\", {\n      key: post.id,\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, index + 1, \". \"), __jsx(\"a\", {\n      href: post.url,\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, post.title), __jsx(PostUpvoter, {\n      id: post.id,\n      votes: post.votes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })));\n  })), areMorePosts && __jsx(\"button\", {\n    onClick: function onClick() {\n      return loadMorePosts();\n    },\n    disabled: loadingMorePosts,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, loadingMorePosts ? 'Loading...' : 'Show More'), __jsx(_JSXStyle, {\n    id: \"1458778202\",\n    __self: this\n  }, \"section.jsx-1458778202{padding-bottom:20px;}li.jsx-1458778202{display:block;margin-bottom:10px;}div.jsx-1458778202{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-1458778202{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-1458778202{font-size:14px;margin-right:5px;}ul.jsx-1458778202{margin:0;padding:0;}button.jsx-1458778202:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pZ2h6L0dpdC9BUEkvcHJpc21hLWV4YW1wbGVzX0dyYXBocWwvZnJvbnRfd2l0aC1hcG9sbG8tYXBwL2NvbXBvbmVudHMvUG9zdExpc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0ZrQixBQUcrQixBQUdOLEFBSUssQUFJSixBQU9BLEFBSU4sQUFJUyxTQUhSLEtBbkJTLENBUUQsQUFPRCxJQUtuQixDQXZCQSxZQW1CQSxDQWZBLEFBUXVCLHNDQWNGLFlBYkYsT0FjVSxHQXBCZCxPQU9KLFNBQ1gsUUFhMkQsa0RBcEIzRCxPQXFCYSxXQUNGLFNBQ1EsaUJBQ1QsUUFDViIsImZpbGUiOiIvVXNlcnMvaWdoei9HaXQvQVBJL3ByaXNtYS1leGFtcGxlc19HcmFwaHFsL2Zyb250X3dpdGgtYXBvbGxvLWFwcC9jb21wb25lbnRzL1Bvc3RMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tICdAYXBvbGxvL3JlYWN0LWhvb2tzJ1xuaW1wb3J0IHsgTmV0d29ya1N0YXR1cyB9IGZyb20gJ2Fwb2xsby1jbGllbnQnXG5pbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJ1xuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICcuL0Vycm9yTWVzc2FnZSdcbmltcG9ydCBQb3N0VXB2b3RlciBmcm9tICcuL1Bvc3RVcHZvdGVyJ1xuXG5leHBvcnQgY29uc3QgQUxMX1BPU1RTX1FVRVJZID0gZ3FsYFxuICBxdWVyeSBhbGxQb3N0cygkZmlyc3Q6IEludCEsICRza2lwOiBJbnQhKSB7XG4gICAgYWxsUG9zdHMob3JkZXJCeTogY3JlYXRlZEF0X0RFU0MsIGZpcnN0OiAkZmlyc3QsIHNraXA6ICRza2lwKSB7XG4gICAgICBpZFxuICAgICAgdGl0bGVcbiAgICAgIHZvdGVzXG4gICAgICB1cmxcbiAgICAgIGNyZWF0ZWRBdFxuICAgIH1cbiAgICBfYWxsUG9zdHNNZXRhIHtcbiAgICAgIGNvdW50XG4gICAgfVxuICB9XG5gXG5leHBvcnQgY29uc3QgYWxsUG9zdHNRdWVyeVZhcnMgPSB7XG4gIHNraXA6IDAsXG4gIGZpcnN0OiAxMFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3N0TGlzdCAoKSB7XG4gIGNvbnN0IHsgbG9hZGluZywgZXJyb3IsIGRhdGEsIGZldGNoTW9yZSwgbmV0d29ya1N0YXR1cyB9ID0gdXNlUXVlcnkoXG4gICAgQUxMX1BPU1RTX1FVRVJZLFxuICAgIHtcbiAgICAgIHZhcmlhYmxlczogYWxsUG9zdHNRdWVyeVZhcnMsXG4gICAgICAvLyBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gdHJ1ZSB3aWxsIG1ha2UgdGhlIGNvbXBvbmVudCByZXJlbmRlciB3aGVuXG4gICAgICAvLyB0aGUgXCJuZXR3b3JrU3RhdHVzXCIgY2hhbmdlcywgc28gd2UgYXJlIGFibGUgdG8ga25vdyBpZiBpdCBpcyBmZXRjaGluZ1xuICAgICAgLy8gbW9yZSBkYXRhXG4gICAgICBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U6IHRydWVcbiAgICB9XG4gIClcblxuICBjb25zdCBsb2FkaW5nTW9yZVBvc3RzID0gbmV0d29ya1N0YXR1cyA9PT0gTmV0d29ya1N0YXR1cy5mZXRjaE1vcmVcblxuICBjb25zdCBsb2FkTW9yZVBvc3RzID0gKCkgPT4ge1xuICAgIGZldGNoTW9yZSh7XG4gICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgc2tpcDogYWxsUG9zdHMubGVuZ3RoXG4gICAgICB9LFxuICAgICAgdXBkYXRlUXVlcnk6IChwcmV2aW91c1Jlc3VsdCwgeyBmZXRjaE1vcmVSZXN1bHQgfSkgPT4ge1xuICAgICAgICBpZiAoIWZldGNoTW9yZVJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBwcmV2aW91c1Jlc3VsdFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2aW91c1Jlc3VsdCwge1xuICAgICAgICAgIC8vIEFwcGVuZCB0aGUgbmV3IHBvc3RzIHJlc3VsdHMgdG8gdGhlIG9sZCBvbmVcbiAgICAgICAgICBhbGxQb3N0czogWy4uLnByZXZpb3VzUmVzdWx0LmFsbFBvc3RzLCAuLi5mZXRjaE1vcmVSZXN1bHQuYWxsUG9zdHNdXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlmIChlcnJvcikgcmV0dXJuIDxFcnJvck1lc3NhZ2UgbWVzc2FnZT0nRXJyb3IgbG9hZGluZyBwb3N0cy4nIC8+XG4gIGlmIChsb2FkaW5nICYmICFsb2FkaW5nTW9yZVBvc3RzKSByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+XG5cbiAgY29uc3QgeyBhbGxQb3N0cywgX2FsbFBvc3RzTWV0YSB9ID0gZGF0YVxuICBjb25zdCBhcmVNb3JlUG9zdHMgPSBhbGxQb3N0cy5sZW5ndGggPCBfYWxsUG9zdHNNZXRhLmNvdW50XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbj5cbiAgICAgIDx1bD5cbiAgICAgICAge2FsbFBvc3RzLm1hcCgocG9zdCwgaW5kZXgpID0+IChcbiAgICAgICAgICA8bGkga2V5PXtwb3N0LmlkfT5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxzcGFuPntpbmRleCArIDF9LiA8L3NwYW4+XG4gICAgICAgICAgICAgIDxhIGhyZWY9e3Bvc3QudXJsfT57cG9zdC50aXRsZX08L2E+XG4gICAgICAgICAgICAgIDxQb3N0VXB2b3RlciBpZD17cG9zdC5pZH0gdm90ZXM9e3Bvc3Qudm90ZXN9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgICB7YXJlTW9yZVBvc3RzICYmIChcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBsb2FkTW9yZVBvc3RzKCl9IGRpc2FibGVkPXtsb2FkaW5nTW9yZVBvc3RzfT5cbiAgICAgICAgICB7bG9hZGluZ01vcmVQb3N0cyA/ICdMb2FkaW5nLi4uJyA6ICdTaG93IE1vcmUnfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICl9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIHNlY3Rpb24ge1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICAgICAgICB9XG4gICAgICAgIGxpIHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIGRpdiB7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICB9XG4gICAgICAgIGEge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xuICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgfVxuICAgICAgICBzcGFuIHtcbiAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgdWwge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpiZWZvcmUge1xuICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgIGJvcmRlci13aWR0aDogNnB4IDRweCAwIDRweDtcbiAgICAgICAgICBib3JkZXItY29sb3I6ICNmZmZmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgIHdpZHRoOiAwO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9zZWN0aW9uPlxuICApXG59XG4iXX0= */\\n/*@ sourceURL=/Users/ighz/Git/API/prisma-examples_Graphql/front_with-apollo-app/components/PostList.js */\"));\n}","map":{"version":3,"sources":["/Users/ighz/Git/API/prisma-examples_Graphql/front_with-apollo-app/components/PostList.js"],"names":["useQuery","NetworkStatus","gql","ErrorMessage","PostUpvoter","ALL_POSTS_QUERY","allPostsQueryVars","skip","first","PostList","variables","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","loadingMorePosts","loadMorePosts","allPosts","length","updateQuery","previousResult","fetchMoreResult","_allPostsMeta","areMorePosts","count","map","post","index","id","url","title","votes"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,IAAMC,eAAe,GAAGH,GAAH,mBAArB;AAcP,OAAO,IAAMI,iBAAiB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,CADyB;AAE/BC,EAAAA,KAAK,EAAE;AAFwB,CAA1B;AAKP,eAAe,SAASC,QAAT,GAAqB;AAAA,kBACyBT,QAAQ,CACjEK,eADiE,EAEjE;AACEK,IAAAA,SAAS,EAAEJ,iBADb;AAEE;AACA;AACA;AACAK,IAAAA,2BAA2B,EAAE;AAL/B,GAFiE,CADjC;AAAA,MAC1BC,OAD0B,aAC1BA,OAD0B;AAAA,MACjBC,KADiB,aACjBA,KADiB;AAAA,MACVC,IADU,aACVA,IADU;AAAA,MACJC,SADI,aACJA,SADI;AAAA,MACOC,aADP,aACOA,aADP;;AAYlC,MAAMC,gBAAgB,GAAGD,aAAa,KAAKf,aAAa,CAACc,SAAzD;;AAEA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BH,IAAAA,SAAS,CAAC;AACRL,MAAAA,SAAS,EAAE;AACTH,QAAAA,IAAI,EAAEY,QAAQ,CAACC;AADN,OADH;AAIRC,MAAAA,WAAW,EAAE,qBAACC,cAAD,QAAyC;AAAA,YAAtBC,eAAsB,QAAtBA,eAAsB;;AACpD,YAAI,CAACA,eAAL,EAAsB;AACpB,iBAAOD,cAAP;AACD;;AACD,eAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACvC;AACAH,UAAAA,QAAQ,+BAAMG,cAAc,CAACH,QAArB,sBAAkCI,eAAe,CAACJ,QAAlD;AAF+B,SAAlC,CAAP;AAID;AAZO,KAAD,CAAT;AAcD,GAfD;;AAiBA,MAAIN,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,OAAO,EAAC,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAID,OAAO,IAAI,CAACK,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAhCA,MAkC1BE,QAlC0B,GAkCEL,IAlCF,CAkC1BK,QAlC0B;AAAA,MAkChBK,aAlCgB,GAkCEV,IAlCF,CAkChBU,aAlCgB;AAmClC,MAAMC,YAAY,GAAGN,QAAQ,CAACC,MAAT,GAAkBI,aAAa,CAACE,KAArD;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QAAQ,CAACQ,GAAT,CAAa,UAACC,IAAD,EAAOC,KAAP;AAAA,WACZ;AAAI,MAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,KAAK,GAAG,CAAf,OADF,EAEE;AAAG,MAAA,IAAI,EAAED,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBH,IAAI,CAACI,KAAzB,CAFF,EAGE,MAAC,WAAD;AAAa,MAAA,EAAE,EAAEJ,IAAI,CAACE,EAAtB;AAA0B,MAAA,KAAK,EAAEF,IAAI,CAACK,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,CADY;AAAA,GAAb,CADH,CADF,EAYGR,YAAY,IACX;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMP,aAAa,EAAnB;AAAA,KAAjB;AAAwC,IAAA,QAAQ,EAAED,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,gBAAgB,GAAG,YAAH,GAAkB,WADrC,CAbJ;AAAA;AAAA;AAAA,+pLADF;AA0DD","sourcesContent":["import { useQuery } from '@apollo/react-hooks'\nimport { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag'\nimport ErrorMessage from './ErrorMessage'\nimport PostUpvoter from './PostUpvoter'\n\nexport const ALL_POSTS_QUERY = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: 10\n}\n\nexport default function PostList () {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      variables: allPostsQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true\n    }\n  )\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return previousResult\n        }\n        return Object.assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n        })\n      }\n    })\n  }\n\n  if (error) return <ErrorMessage message='Error loading posts.' />\n  if (loading && !loadingMorePosts) return <div>Loading</div>\n\n  const { allPosts, _allPostsMeta } = data\n  const areMorePosts = allPosts.length < _allPostsMeta.count\n\n  return (\n    <section>\n      <ul>\n        {allPosts.map((post, index) => (\n          <li key={post.id}>\n            <div>\n              <span>{index + 1}. </span>\n              <a href={post.url}>{post.title}</a>\n              <PostUpvoter id={post.id} votes={post.votes} />\n            </div>\n          </li>\n        ))}\n      </ul>\n      {areMorePosts && (\n        <button onClick={() => loadMorePosts()} disabled={loadingMorePosts}>\n          {loadingMorePosts ? 'Loading...' : 'Show More'}\n        </button>\n      )}\n      <style jsx>{`\n        section {\n          padding-bottom: 20px;\n        }\n        li {\n          display: block;\n          margin-bottom: 10px;\n        }\n        div {\n          align-items: center;\n          display: flex;\n        }\n        a {\n          font-size: 14px;\n          margin-right: 10px;\n          text-decoration: none;\n          padding-bottom: 0;\n          border: 0;\n        }\n        span {\n          font-size: 14px;\n          margin-right: 5px;\n        }\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n        button:before {\n          align-self: center;\n          border-style: solid;\n          border-width: 6px 4px 0 4px;\n          border-color: #ffffff transparent transparent transparent;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n    </section>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}